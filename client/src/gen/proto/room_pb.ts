// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file proto/room.proto (package proto.room.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.room.v1.Room
 */
export class Room extends Message<Room> {
  /**
   * @generated from field: string room_id = 1;
   */
  roomId = "";

  /**
   * @generated from field: string room_name = 2;
   */
  roomName = "";

  constructor(data?: PartialMessage<Room>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.room.v1.Room";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "room_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Room {
    return new Room().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Room {
    return new Room().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Room {
    return new Room().fromJsonString(jsonString, options);
  }

  static equals(a: Room | PlainMessage<Room> | undefined, b: Room | PlainMessage<Room> | undefined): boolean {
    return proto3.util.equals(Room, a, b);
  }
}

/**
 * @generated from message proto.room.v1.Member
 */
export class Member extends Message<Member> {
  /**
   * @generated from field: string member_id = 1;
   */
  memberId = "";

  /**
   * @generated from field: string member_name = 2;
   */
  memberName = "";

  constructor(data?: PartialMessage<Member>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.room.v1.Member";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "member_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "member_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Member {
    return new Member().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJsonString(jsonString, options);
  }

  static equals(a: Member | PlainMessage<Member> | undefined, b: Member | PlainMessage<Member> | undefined): boolean {
    return proto3.util.equals(Member, a, b);
  }
}

/**
 * @generated from message proto.room.v1.CreateRoomRequest
 */
export class CreateRoomRequest extends Message<CreateRoomRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<CreateRoomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.room.v1.CreateRoomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoomRequest {
    return new CreateRoomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined, b: CreateRoomRequest | PlainMessage<CreateRoomRequest> | undefined): boolean {
    return proto3.util.equals(CreateRoomRequest, a, b);
  }
}

/**
 * @generated from message proto.room.v1.CreateRoomResponse
 */
export class CreateRoomResponse extends Message<CreateRoomResponse> {
  /**
   * @generated from field: string room_id = 1;
   */
  roomId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<CreateRoomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.room.v1.CreateRoomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRoomResponse {
    return new CreateRoomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRoomResponse {
    return new CreateRoomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRoomResponse {
    return new CreateRoomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRoomResponse | PlainMessage<CreateRoomResponse> | undefined, b: CreateRoomResponse | PlainMessage<CreateRoomResponse> | undefined): boolean {
    return proto3.util.equals(CreateRoomResponse, a, b);
  }
}

/**
 * @generated from message proto.room.v1.GetAllRoomsRequest
 */
export class GetAllRoomsRequest extends Message<GetAllRoomsRequest> {
  constructor(data?: PartialMessage<GetAllRoomsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.room.v1.GetAllRoomsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllRoomsRequest {
    return new GetAllRoomsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllRoomsRequest {
    return new GetAllRoomsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllRoomsRequest {
    return new GetAllRoomsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllRoomsRequest | PlainMessage<GetAllRoomsRequest> | undefined, b: GetAllRoomsRequest | PlainMessage<GetAllRoomsRequest> | undefined): boolean {
    return proto3.util.equals(GetAllRoomsRequest, a, b);
  }
}

/**
 * @generated from message proto.room.v1.GetAllRoomsResponse
 */
export class GetAllRoomsResponse extends Message<GetAllRoomsResponse> {
  /**
   * @generated from field: repeated proto.room.v1.Room rooms = 1;
   */
  rooms: Room[] = [];

  constructor(data?: PartialMessage<GetAllRoomsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.room.v1.GetAllRoomsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rooms", kind: "message", T: Room, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllRoomsResponse {
    return new GetAllRoomsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllRoomsResponse {
    return new GetAllRoomsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllRoomsResponse {
    return new GetAllRoomsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllRoomsResponse | PlainMessage<GetAllRoomsResponse> | undefined, b: GetAllRoomsResponse | PlainMessage<GetAllRoomsResponse> | undefined): boolean {
    return proto3.util.equals(GetAllRoomsResponse, a, b);
  }
}

/**
 * @generated from message proto.room.v1.GetRoomMembersRequest
 */
export class GetRoomMembersRequest extends Message<GetRoomMembersRequest> {
  /**
   * @generated from field: string room_id = 1;
   */
  roomId = "";

  constructor(data?: PartialMessage<GetRoomMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.room.v1.GetRoomMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoomMembersRequest {
    return new GetRoomMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoomMembersRequest {
    return new GetRoomMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoomMembersRequest {
    return new GetRoomMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoomMembersRequest | PlainMessage<GetRoomMembersRequest> | undefined, b: GetRoomMembersRequest | PlainMessage<GetRoomMembersRequest> | undefined): boolean {
    return proto3.util.equals(GetRoomMembersRequest, a, b);
  }
}

/**
 * @generated from message proto.room.v1.GetRoomsMemberResponse
 */
export class GetRoomsMemberResponse extends Message<GetRoomsMemberResponse> {
  /**
   * @generated from field: repeated proto.room.v1.Member members = 1;
   */
  members: Member[] = [];

  constructor(data?: PartialMessage<GetRoomsMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.room.v1.GetRoomsMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: Member, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRoomsMemberResponse {
    return new GetRoomsMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRoomsMemberResponse {
    return new GetRoomsMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRoomsMemberResponse {
    return new GetRoomsMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRoomsMemberResponse | PlainMessage<GetRoomsMemberResponse> | undefined, b: GetRoomsMemberResponse | PlainMessage<GetRoomsMemberResponse> | undefined): boolean {
    return proto3.util.equals(GetRoomsMemberResponse, a, b);
  }
}

