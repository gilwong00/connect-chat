// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/user/v1/user.proto

package userv1connect

import (
	context "context"
	errors "errors"
	v1 "gilwong00/connect-chat/gen/proto/user/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "proto.user.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/proto.user.v1.UserService/GetUser"
	// UserServiceGetUserByEmailProcedure is the fully-qualified name of the UserService's
	// GetUserByEmail RPC.
	UserServiceGetUserByEmailProcedure = "/proto.user.v1.UserService/GetUserByEmail"
	// UserServiceCreateUserProcedure is the fully-qualified name of the UserService's CreateUser RPC.
	UserServiceCreateUserProcedure = "/proto.user.v1.UserService/CreateUser"
	// UserServiceLoginProcedure is the fully-qualified name of the UserService's Login RPC.
	UserServiceLoginProcedure = "/proto.user.v1.UserService/Login"
	// UserServiceWhoAmIProcedure is the fully-qualified name of the UserService's WhoAmI RPC.
	UserServiceWhoAmIProcedure = "/proto.user.v1.UserService/WhoAmI"
)

// UserServiceClient is a client for the proto.user.v1.UserService service.
type UserServiceClient interface {
	GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error)
	GetUserByEmail(context.Context, *connect_go.Request[v1.GetUserByEmailRequest]) (*connect_go.Response[v1.GetUserByEmailResponse], error)
	CreateUser(context.Context, *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.CreateUserResponse], error)
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	WhoAmI(context.Context, *connect_go.Request[v1.WhoAmIRequest]) (*connect_go.Response[v1.WhoAmIReponse], error)
}

// NewUserServiceClient constructs a client for the proto.user.v1.UserService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &userServiceClient{
		getUser: connect_go.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			opts...,
		),
		getUserByEmail: connect_go.NewClient[v1.GetUserByEmailRequest, v1.GetUserByEmailResponse](
			httpClient,
			baseURL+UserServiceGetUserByEmailProcedure,
			opts...,
		),
		createUser: connect_go.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+UserServiceCreateUserProcedure,
			opts...,
		),
		login: connect_go.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+UserServiceLoginProcedure,
			opts...,
		),
		whoAmI: connect_go.NewClient[v1.WhoAmIRequest, v1.WhoAmIReponse](
			httpClient,
			baseURL+UserServiceWhoAmIProcedure,
			opts...,
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getUser        *connect_go.Client[v1.GetUserRequest, v1.GetUserResponse]
	getUserByEmail *connect_go.Client[v1.GetUserByEmailRequest, v1.GetUserByEmailResponse]
	createUser     *connect_go.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	login          *connect_go.Client[v1.LoginRequest, v1.LoginResponse]
	whoAmI         *connect_go.Client[v1.WhoAmIRequest, v1.WhoAmIReponse]
}

// GetUser calls proto.user.v1.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// GetUserByEmail calls proto.user.v1.UserService.GetUserByEmail.
func (c *userServiceClient) GetUserByEmail(ctx context.Context, req *connect_go.Request[v1.GetUserByEmailRequest]) (*connect_go.Response[v1.GetUserByEmailResponse], error) {
	return c.getUserByEmail.CallUnary(ctx, req)
}

// CreateUser calls proto.user.v1.UserService.CreateUser.
func (c *userServiceClient) CreateUser(ctx context.Context, req *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// Login calls proto.user.v1.UserService.Login.
func (c *userServiceClient) Login(ctx context.Context, req *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// WhoAmI calls proto.user.v1.UserService.WhoAmI.
func (c *userServiceClient) WhoAmI(ctx context.Context, req *connect_go.Request[v1.WhoAmIRequest]) (*connect_go.Response[v1.WhoAmIReponse], error) {
	return c.whoAmI.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the proto.user.v1.UserService service.
type UserServiceHandler interface {
	GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error)
	GetUserByEmail(context.Context, *connect_go.Request[v1.GetUserByEmailRequest]) (*connect_go.Response[v1.GetUserByEmailResponse], error)
	CreateUser(context.Context, *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.CreateUserResponse], error)
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	WhoAmI(context.Context, *connect_go.Request[v1.WhoAmIRequest]) (*connect_go.Response[v1.WhoAmIReponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(UserServiceGetUserProcedure, connect_go.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		opts...,
	))
	mux.Handle(UserServiceGetUserByEmailProcedure, connect_go.NewUnaryHandler(
		UserServiceGetUserByEmailProcedure,
		svc.GetUserByEmail,
		opts...,
	))
	mux.Handle(UserServiceCreateUserProcedure, connect_go.NewUnaryHandler(
		UserServiceCreateUserProcedure,
		svc.CreateUser,
		opts...,
	))
	mux.Handle(UserServiceLoginProcedure, connect_go.NewUnaryHandler(
		UserServiceLoginProcedure,
		svc.Login,
		opts...,
	))
	mux.Handle(UserServiceWhoAmIProcedure, connect_go.NewUnaryHandler(
		UserServiceWhoAmIProcedure,
		svc.WhoAmI,
		opts...,
	))
	return "/proto.user.v1.UserService/", mux
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect_go.Request[v1.GetUserRequest]) (*connect_go.Response[v1.GetUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.user.v1.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserByEmail(context.Context, *connect_go.Request[v1.GetUserByEmailRequest]) (*connect_go.Response[v1.GetUserByEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.user.v1.UserService.GetUserByEmail is not implemented"))
}

func (UnimplementedUserServiceHandler) CreateUser(context.Context, *connect_go.Request[v1.CreateUserRequest]) (*connect_go.Response[v1.CreateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.user.v1.UserService.CreateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.user.v1.UserService.Login is not implemented"))
}

func (UnimplementedUserServiceHandler) WhoAmI(context.Context, *connect_go.Request[v1.WhoAmIRequest]) (*connect_go.Response[v1.WhoAmIReponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.user.v1.UserService.WhoAmI is not implemented"))
}
