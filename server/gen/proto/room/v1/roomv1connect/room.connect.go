// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/room/v1/room.proto

package roomv1connect

import (
	context "context"
	errors "errors"
	v1 "gilwong00/connect-chat/gen/proto/room/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RoomServiceName is the fully-qualified name of the RoomService service.
	RoomServiceName = "proto.room.v1.RoomService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RoomServiceCreateRoomProcedure is the fully-qualified name of the RoomService's CreateRoom RPC.
	RoomServiceCreateRoomProcedure = "/proto.room.v1.RoomService/CreateRoom"
	// RoomServiceGetAllRoomsProcedure is the fully-qualified name of the RoomService's GetAllRooms RPC.
	RoomServiceGetAllRoomsProcedure = "/proto.room.v1.RoomService/GetAllRooms"
	// RoomServiceGetRoomMembersProcedure is the fully-qualified name of the RoomService's
	// GetRoomMembers RPC.
	RoomServiceGetRoomMembersProcedure = "/proto.room.v1.RoomService/GetRoomMembers"
)

// RoomServiceClient is a client for the proto.room.v1.RoomService service.
type RoomServiceClient interface {
	CreateRoom(context.Context, *connect_go.Request[v1.CreateRoomRequest]) (*connect_go.Response[v1.CreateRoomResponse], error)
	GetAllRooms(context.Context, *connect_go.Request[v1.GetAllRoomsRequest]) (*connect_go.Response[v1.GetAllRoomsResponse], error)
	GetRoomMembers(context.Context, *connect_go.Request[v1.GetRoomMembersRequest]) (*connect_go.Response[v1.GetRoomsMemberResponse], error)
}

// NewRoomServiceClient constructs a client for the proto.room.v1.RoomService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRoomServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RoomServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &roomServiceClient{
		createRoom: connect_go.NewClient[v1.CreateRoomRequest, v1.CreateRoomResponse](
			httpClient,
			baseURL+RoomServiceCreateRoomProcedure,
			opts...,
		),
		getAllRooms: connect_go.NewClient[v1.GetAllRoomsRequest, v1.GetAllRoomsResponse](
			httpClient,
			baseURL+RoomServiceGetAllRoomsProcedure,
			opts...,
		),
		getRoomMembers: connect_go.NewClient[v1.GetRoomMembersRequest, v1.GetRoomsMemberResponse](
			httpClient,
			baseURL+RoomServiceGetRoomMembersProcedure,
			opts...,
		),
	}
}

// roomServiceClient implements RoomServiceClient.
type roomServiceClient struct {
	createRoom     *connect_go.Client[v1.CreateRoomRequest, v1.CreateRoomResponse]
	getAllRooms    *connect_go.Client[v1.GetAllRoomsRequest, v1.GetAllRoomsResponse]
	getRoomMembers *connect_go.Client[v1.GetRoomMembersRequest, v1.GetRoomsMemberResponse]
}

// CreateRoom calls proto.room.v1.RoomService.CreateRoom.
func (c *roomServiceClient) CreateRoom(ctx context.Context, req *connect_go.Request[v1.CreateRoomRequest]) (*connect_go.Response[v1.CreateRoomResponse], error) {
	return c.createRoom.CallUnary(ctx, req)
}

// GetAllRooms calls proto.room.v1.RoomService.GetAllRooms.
func (c *roomServiceClient) GetAllRooms(ctx context.Context, req *connect_go.Request[v1.GetAllRoomsRequest]) (*connect_go.Response[v1.GetAllRoomsResponse], error) {
	return c.getAllRooms.CallUnary(ctx, req)
}

// GetRoomMembers calls proto.room.v1.RoomService.GetRoomMembers.
func (c *roomServiceClient) GetRoomMembers(ctx context.Context, req *connect_go.Request[v1.GetRoomMembersRequest]) (*connect_go.Response[v1.GetRoomsMemberResponse], error) {
	return c.getRoomMembers.CallUnary(ctx, req)
}

// RoomServiceHandler is an implementation of the proto.room.v1.RoomService service.
type RoomServiceHandler interface {
	CreateRoom(context.Context, *connect_go.Request[v1.CreateRoomRequest]) (*connect_go.Response[v1.CreateRoomResponse], error)
	GetAllRooms(context.Context, *connect_go.Request[v1.GetAllRoomsRequest]) (*connect_go.Response[v1.GetAllRoomsResponse], error)
	GetRoomMembers(context.Context, *connect_go.Request[v1.GetRoomMembersRequest]) (*connect_go.Response[v1.GetRoomsMemberResponse], error)
}

// NewRoomServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRoomServiceHandler(svc RoomServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(RoomServiceCreateRoomProcedure, connect_go.NewUnaryHandler(
		RoomServiceCreateRoomProcedure,
		svc.CreateRoom,
		opts...,
	))
	mux.Handle(RoomServiceGetAllRoomsProcedure, connect_go.NewUnaryHandler(
		RoomServiceGetAllRoomsProcedure,
		svc.GetAllRooms,
		opts...,
	))
	mux.Handle(RoomServiceGetRoomMembersProcedure, connect_go.NewUnaryHandler(
		RoomServiceGetRoomMembersProcedure,
		svc.GetRoomMembers,
		opts...,
	))
	return "/proto.room.v1.RoomService/", mux
}

// UnimplementedRoomServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRoomServiceHandler struct{}

func (UnimplementedRoomServiceHandler) CreateRoom(context.Context, *connect_go.Request[v1.CreateRoomRequest]) (*connect_go.Response[v1.CreateRoomResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.room.v1.RoomService.CreateRoom is not implemented"))
}

func (UnimplementedRoomServiceHandler) GetAllRooms(context.Context, *connect_go.Request[v1.GetAllRoomsRequest]) (*connect_go.Response[v1.GetAllRoomsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.room.v1.RoomService.GetAllRooms is not implemented"))
}

func (UnimplementedRoomServiceHandler) GetRoomMembers(context.Context, *connect_go.Request[v1.GetRoomMembersRequest]) (*connect_go.Response[v1.GetRoomsMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.room.v1.RoomService.GetRoomMembers is not implemented"))
}
